{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {},
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@prb/test/=lib/prb-math/lib/prb-test/src/\",\":decimath/=lib/decimath/contracts/\",\":ds-test/=lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":prb-math/=lib/prb-math/src/\",\":prb-test/=lib/prb-math/lib/prb-test/src/\",\":solmate/=lib/solmate/src/\",\":src/=src/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xf90ca139c587aa92eab3b5d88cdfd9a95e631b6322c92f9a8b0c75c5cd0f8ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3cef964a3698c9262b531397276bd3a6fe5c213c34c3924a0939da41398b6f31\",\"dweb:/ipfs/QmcnsZqgs3XUrrptUzVcL7BR4W6qQjBkif2SSpbJGvLE87\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0xf8313972e73a49ff9a8c2dee0b9a07a3585bc4d077bd8a9670ebdd76ff390177\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3fc2a0888fca21e976b4b77ca46891f547ff339a8175bc0a6461a62ce65aa89a\",\"dweb:/ipfs/QmYDpaGK98esv36MBanhjgzpS7QcisrsVMzttPknvxWhRG\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x8d195f4fb42b15464ab01ae3fb99b6f5c88526ae9b4187f0774741ad0dc6d3d2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3a2c223fb1f1d38983f2c58d410032d20220b1050c1effbbfcac71e73da3e622\",\"dweb:/ipfs/QmQ1da9VzJZc6bkN7hNUeMUm3JxNxDBvSTDkqSkrfAZZp2\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.17+commit.8df45f5f"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "version",
              "type": "uint8",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@prb/test/=lib/prb-math/lib/prb-test/src/",
        ":decimath/=lib/decimath/contracts/",
        ":ds-test/=lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
        ":prb-math/=lib/prb-math/src/",
        ":prb-test/=lib/prb-math/lib/prb-test/src/",
        ":solmate/=lib/solmate/src/",
        ":src/=src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": "ContextUpgradeable"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
        "keccak256": "0xf90ca139c587aa92eab3b5d88cdfd9a95e631b6322c92f9a8b0c75c5cd0f8ce1",
        "urls": [
          "bzz-raw://3cef964a3698c9262b531397276bd3a6fe5c213c34c3924a0939da41398b6f31",
          "dweb:/ipfs/QmcnsZqgs3XUrrptUzVcL7BR4W6qQjBkif2SSpbJGvLE87"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
        "keccak256": "0xf8313972e73a49ff9a8c2dee0b9a07a3585bc4d077bd8a9670ebdd76ff390177",
        "urls": [
          "bzz-raw://3fc2a0888fca21e976b4b77ca46891f547ff339a8175bc0a6461a62ce65aa89a",
          "dweb:/ipfs/QmYDpaGK98esv36MBanhjgzpS7QcisrsVMzttPknvxWhRG"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
        "keccak256": "0x8d195f4fb42b15464ab01ae3fb99b6f5c88526ae9b4187f0774741ad0dc6d3d2",
        "urls": [
          "bzz-raw://3a2c223fb1f1d38983f2c58d410032d20220b1050c1effbbfcac71e73da3e622",
          "dweb:/ipfs/QmQ1da9VzJZc6bkN7hNUeMUm3JxNxDBvSTDkqSkrfAZZp2"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol",
    "id": 21183,
    "exportedSymbols": {
      "AddressUpgradeable": [
        21140
      ],
      "ContextUpgradeable": [
        21182
      ],
      "Initializable": [
        19844
      ]
    },
    "nodeType": "SourceUnit",
    "src": "86:1250:18",
    "nodes": [
      {
        "id": 21142,
        "nodeType": "PragmaDirective",
        "src": "86:23:18",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 21143,
        "nodeType": "ImportDirective",
        "src": "110:42:18",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
        "file": "../proxy/utils/Initializable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 21183,
        "sourceUnit": 19845,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 21182,
        "nodeType": "ContractDefinition",
        "src": "651:684:18",
        "nodes": [
          {
            "id": 21152,
            "nodeType": "FunctionDefinition",
            "src": "711:54:18",
            "nodes": [],
            "body": {
              "id": 21151,
              "nodeType": "Block",
              "src": "763:2:18",
              "nodes": [],
              "statements": []
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 21149,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 21148,
                  "name": "onlyInitializing",
                  "nameLocations": [
                    "746:16:18"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 19789,
                  "src": "746:16:18"
                },
                "nodeType": "ModifierInvocation",
                "src": "746:16:18"
              }
            ],
            "name": "__Context_init",
            "nameLocation": "720:14:18",
            "parameters": {
              "id": 21147,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "734:2:18"
            },
            "returnParameters": {
              "id": 21150,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "763:0:18"
            },
            "scope": 21182,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 21158,
            "nodeType": "FunctionDefinition",
            "src": "771:64:18",
            "nodes": [],
            "body": {
              "id": 21157,
              "nodeType": "Block",
              "src": "833:2:18",
              "nodes": [],
              "statements": []
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 21155,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 21154,
                  "name": "onlyInitializing",
                  "nameLocations": [
                    "816:16:18"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 19789,
                  "src": "816:16:18"
                },
                "nodeType": "ModifierInvocation",
                "src": "816:16:18"
              }
            ],
            "name": "__Context_init_unchained",
            "nameLocation": "780:24:18",
            "parameters": {
              "id": 21153,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "804:2:18"
            },
            "returnParameters": {
              "id": 21156,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "833:0:18"
            },
            "scope": 21182,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 21167,
            "nodeType": "FunctionDefinition",
            "src": "841:96:18",
            "nodes": [],
            "body": {
              "id": 21166,
              "nodeType": "Block",
              "src": "903:34:18",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "id": 21163,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "920:3:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 21164,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "924:6:18",
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "920:10:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 21162,
                  "id": 21165,
                  "nodeType": "Return",
                  "src": "913:17:18"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_msgSender",
            "nameLocation": "850:10:18",
            "parameters": {
              "id": 21159,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "860:2:18"
            },
            "returnParameters": {
              "id": 21162,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21161,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 21167,
                  "src": "894:7:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 21160,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "894:7:18",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "893:9:18"
            },
            "scope": 21182,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 21176,
            "nodeType": "FunctionDefinition",
            "src": "943:99:18",
            "nodes": [],
            "body": {
              "id": 21175,
              "nodeType": "Block",
              "src": "1010:32:18",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "id": 21172,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "1027:3:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 21173,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "1031:4:18",
                    "memberName": "data",
                    "nodeType": "MemberAccess",
                    "src": "1027:8:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_calldata_ptr",
                      "typeString": "bytes calldata"
                    }
                  },
                  "functionReturnParameters": 21171,
                  "id": 21174,
                  "nodeType": "Return",
                  "src": "1020:15:18"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_msgData",
            "nameLocation": "952:8:18",
            "parameters": {
              "id": 21168,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "960:2:18"
            },
            "returnParameters": {
              "id": 21171,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21170,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 21176,
                  "src": "994:14:18",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 21169,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "994:5:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "993:16:18"
            },
            "scope": 21182,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 21181,
            "nodeType": "VariableDeclaration",
            "src": "1307:25:18",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 21177,
              "nodeType": "StructuredDocumentation",
              "src": "1048:254:18",
              "text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
            },
            "mutability": "mutable",
            "name": "__gap",
            "nameLocation": "1327:5:18",
            "scope": 21182,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$50_storage",
              "typeString": "uint256[50]"
            },
            "typeName": {
              "baseType": {
                "id": 21178,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1307:7:18",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 21180,
              "length": {
                "hexValue": "3530",
                "id": 21179,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1315:2:18",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_50_by_1",
                  "typeString": "int_const 50"
                },
                "value": "50"
              },
              "nodeType": "ArrayTypeName",
              "src": "1307:11:18",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
                "typeString": "uint256[50]"
              }
            },
            "visibility": "private"
          }
        ],
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 21145,
              "name": "Initializable",
              "nameLocations": [
                "691:13:18"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 19844,
              "src": "691:13:18"
            },
            "id": 21146,
            "nodeType": "InheritanceSpecifier",
            "src": "691:13:18"
          }
        ],
        "canonicalName": "ContextUpgradeable",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 21144,
          "nodeType": "StructuredDocumentation",
          "src": "154:496:18",
          "text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          21182,
          19844
        ],
        "name": "ContextUpgradeable",
        "nameLocation": "669:18:18",
        "scope": 21183,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 18
}