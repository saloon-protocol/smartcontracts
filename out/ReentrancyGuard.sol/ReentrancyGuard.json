{
  "abi": [],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {},
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]. _Since v2.5.0:_ this module is now much more gas efficient, given net gas metering changes introduced in the Istanbul hardfork.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"LOCK_FLAG_ADDRESS\":{\"details\":\"Address of lock flag variable.Flag is placed at random memory location to not interfere with Storage contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@prb/test/=lib/prb-math/lib/prb-test/src/\",\":decimath/=lib/decimath/contracts/\",\":ds-test/=lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":prb-math/=lib/prb-math/src/\",\":prb-test/=lib/prb-math/lib/prb-test/src/\",\":solmate/=lib/solmate/src/\",\":src/=src/\"]},\"sources\":{\"src/ReentrancyGuard.sol\":{\"keccak256\":\"0xf37881536e58dc90070da8ffb6dca11e2286c9ead1443a4dee8e628efca26dac\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://cf81ff4c10c82287e067b314e9fd9b930eec370cae6387aa8e7503c31701415d\",\"dweb:/ipfs/QmSjmg633JkWtbLbcQwo2PSq3oWcNAm3fAGmVbRnrnGRmt\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@prb/test/=lib/prb-math/lib/prb-test/src/",
        ":decimath/=lib/decimath/contracts/",
        ":ds-test/=lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
        ":prb-math/=lib/prb-math/src/",
        ":prb-test/=lib/prb-math/lib/prb-test/src/",
        ":solmate/=lib/solmate/src/",
        ":src/=src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/ReentrancyGuard.sol": "ReentrancyGuard"
      },
      "libraries": {}
    },
    "sources": {
      "src/ReentrancyGuard.sol": {
        "keccak256": "0xf37881536e58dc90070da8ffb6dca11e2286c9ead1443a4dee8e628efca26dac",
        "urls": [
          "bzz-raw://cf81ff4c10c82287e067b314e9fd9b930eec370cae6387aa8e7503c31701415d",
          "dweb:/ipfs/QmSjmg633JkWtbLbcQwo2PSq3oWcNAm3fAGmVbRnrnGRmt"
        ],
        "license": "MIT OR Apache-2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/ReentrancyGuard.sol",
    "id": 33499,
    "exportedSymbols": {
      "ReentrancyGuard": [
        33498
      ]
    },
    "nodeType": "SourceUnit",
    "src": "47:3514:57",
    "nodes": [
      {
        "id": 33446,
        "nodeType": "PragmaDirective",
        "src": "47:23:57",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 33498,
        "nodeType": "ContractDefinition",
        "src": "960:2600:57",
        "nodes": [
          {
            "id": 33451,
            "nodeType": "VariableDeclaration",
            "src": "1138:119:57",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 33448,
              "nodeType": "StructuredDocumentation",
              "src": "1000:133:57",
              "text": "@dev Address of lock flag variable.\n @dev Flag is placed at random memory location to not interfere with Storage contract."
            },
            "mutability": "constant",
            "name": "LOCK_FLAG_ADDRESS",
            "nameLocation": "1163:17:57",
            "scope": 33498,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 33449,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1138:7:57",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "307838653934666564343432333965623233313461623761343036333435653663356138663063636564663362363030646533643030346536373263333361626634",
              "id": 33450,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1191:66:57",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_64491676630466243809640389642816699344250122302177356955313734891917720923124_by_1",
                "typeString": "int_const 6449...(69 digits omitted)...3124"
              },
              "value": "0x8e94fed44239eb2314ab7a406345e6c5a8f0ccedf3b600de3d004e672c33abf4"
            },
            "visibility": "private"
          },
          {
            "id": 33454,
            "nodeType": "VariableDeclaration",
            "src": "1827:41:57",
            "nodes": [],
            "constant": true,
            "mutability": "constant",
            "name": "_NOT_ENTERED",
            "nameLocation": "1852:12:57",
            "scope": 33498,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 33452,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1827:7:57",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "31",
              "id": 33453,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1867:1:57",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1_by_1",
                "typeString": "int_const 1"
              },
              "value": "1"
            },
            "visibility": "private"
          },
          {
            "id": 33457,
            "nodeType": "VariableDeclaration",
            "src": "1874:37:57",
            "nodes": [],
            "constant": true,
            "mutability": "constant",
            "name": "_ENTERED",
            "nameLocation": "1899:8:57",
            "scope": 33498,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 33455,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1874:7:57",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "32",
              "id": 33456,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1910:1:57",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_2_by_1",
                "typeString": "int_const 2"
              },
              "value": "2"
            },
            "visibility": "private"
          },
          {
            "id": 33464,
            "nodeType": "ModifierDefinition",
            "src": "1918:94:57",
            "nodes": [],
            "body": {
              "id": 33463,
              "nodeType": "Block",
              "src": "1956:56:57",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 33459,
                      "name": "_initializeReentrancyGuard",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 33479,
                      "src": "1966:26:57",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 33460,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1966:28:57",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 33461,
                  "nodeType": "ExpressionStatement",
                  "src": "1966:28:57"
                },
                {
                  "id": 33462,
                  "nodeType": "PlaceholderStatement",
                  "src": "2004:1:57"
                }
              ]
            },
            "name": "reentrancyGuardInitializer",
            "nameLocation": "1927:26:57",
            "parameters": {
              "id": 33458,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1953:2:57"
            },
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 33479,
            "nodeType": "FunctionDefinition",
            "src": "2018:544:57",
            "nodes": [],
            "body": {
              "id": 33478,
              "nodeType": "Block",
              "src": "2064:498:57",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    33468
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 33468,
                      "mutability": "mutable",
                      "name": "lockSlotOldValue",
                      "nameLocation": "2082:16:57",
                      "nodeType": "VariableDeclaration",
                      "scope": 33478,
                      "src": "2074:24:57",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 33467,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2074:7:57",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 33469,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2074:24:57"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "2283:120:57",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "2297:44:57",
                        "value": {
                          "arguments": [
                            {
                              "name": "LOCK_FLAG_ADDRESS",
                              "nodeType": "YulIdentifier",
                              "src": "2323:17:57"
                            }
                          ],
                          "functionName": {
                            "name": "sload",
                            "nodeType": "YulIdentifier",
                            "src": "2317:5:57"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "2317:24:57"
                        },
                        "variableNames": [
                          {
                            "name": "lockSlotOldValue",
                            "nodeType": "YulIdentifier",
                            "src": "2297:16:57"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "LOCK_FLAG_ADDRESS",
                              "nodeType": "YulIdentifier",
                              "src": "2361:17:57"
                            },
                            {
                              "name": "_NOT_ENTERED",
                              "nodeType": "YulIdentifier",
                              "src": "2380:12:57"
                            }
                          ],
                          "functionName": {
                            "name": "sstore",
                            "nodeType": "YulIdentifier",
                            "src": "2354:6:57"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "2354:39:57"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "2354:39:57"
                      }
                    ]
                  },
                  "evmVersion": "london",
                  "externalReferences": [
                    {
                      "declaration": 33451,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "2323:17:57",
                      "valueSize": 1
                    },
                    {
                      "declaration": 33451,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "2361:17:57",
                      "valueSize": 1
                    },
                    {
                      "declaration": 33454,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "2380:12:57",
                      "valueSize": 1
                    },
                    {
                      "declaration": 33468,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "2297:16:57",
                      "valueSize": 1
                    }
                  ],
                  "id": 33470,
                  "nodeType": "InlineAssembly",
                  "src": "2274:129:57"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 33474,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 33472,
                          "name": "lockSlotOldValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 33468,
                          "src": "2527:16:57",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 33473,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2547:1:57",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "2527:21:57",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "3142",
                        "id": 33475,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2550:4:57",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_73661624d3d9d622617907ec04fc037e9913f4237ce6560d7963508388d43472",
                          "typeString": "literal_string \"1B\""
                        },
                        "value": "1B"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_73661624d3d9d622617907ec04fc037e9913f4237ce6560d7963508388d43472",
                          "typeString": "literal_string \"1B\""
                        }
                      ],
                      "id": 33471,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2519:7:57",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 33476,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2519:36:57",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 33477,
                  "nodeType": "ExpressionStatement",
                  "src": "2519:36:57"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_initializeReentrancyGuard",
            "nameLocation": "2027:26:57",
            "parameters": {
              "id": 33465,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2053:2:57"
            },
            "returnParameters": {
              "id": 33466,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2064:0:57"
            },
            "scope": 33498,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "private"
          },
          {
            "id": 33497,
            "nodeType": "ModifierDefinition",
            "src": "2937:621:57",
            "nodes": [],
            "body": {
              "id": 33496,
              "nodeType": "Block",
              "src": "2961:597:57",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    33483
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 33483,
                      "mutability": "mutable",
                      "name": "_status",
                      "nameLocation": "2979:7:57",
                      "nodeType": "VariableDeclaration",
                      "scope": 33496,
                      "src": "2971:15:57",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 33482,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2971:7:57",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 33484,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2971:15:57"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "3005:59:57",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "3019:35:57",
                        "value": {
                          "arguments": [
                            {
                              "name": "LOCK_FLAG_ADDRESS",
                              "nodeType": "YulIdentifier",
                              "src": "3036:17:57"
                            }
                          ],
                          "functionName": {
                            "name": "sload",
                            "nodeType": "YulIdentifier",
                            "src": "3030:5:57"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "3030:24:57"
                        },
                        "variableNames": [
                          {
                            "name": "_status",
                            "nodeType": "YulIdentifier",
                            "src": "3019:7:57"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "london",
                  "externalReferences": [
                    {
                      "declaration": 33451,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "3036:17:57",
                      "valueSize": 1
                    },
                    {
                      "declaration": 33483,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "3019:7:57",
                      "valueSize": 1
                    }
                  ],
                  "id": 33485,
                  "nodeType": "InlineAssembly",
                  "src": "2996:68:57"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 33489,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 33487,
                          "name": "_status",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 33483,
                          "src": "3153:7:57",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 33488,
                          "name": "_NOT_ENTERED",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 33454,
                          "src": "3164:12:57",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "3153:23:57",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "7231",
                        "id": 33490,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3178:4:57",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_7d836ba56b88abad41af9a2d0e7a278279f5d24a80179a540545eb5cc8621d6e",
                          "typeString": "literal_string \"r1\""
                        },
                        "value": "r1"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_7d836ba56b88abad41af9a2d0e7a278279f5d24a80179a540545eb5cc8621d6e",
                          "typeString": "literal_string \"r1\""
                        }
                      ],
                      "id": 33486,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3145:7:57",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 33491,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3145:38:57",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 33492,
                  "nodeType": "ExpressionStatement",
                  "src": "3145:38:57"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "3267:59:57",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "LOCK_FLAG_ADDRESS",
                              "nodeType": "YulIdentifier",
                              "src": "3288:17:57"
                            },
                            {
                              "name": "_ENTERED",
                              "nodeType": "YulIdentifier",
                              "src": "3307:8:57"
                            }
                          ],
                          "functionName": {
                            "name": "sstore",
                            "nodeType": "YulIdentifier",
                            "src": "3281:6:57"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "3281:35:57"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "3281:35:57"
                      }
                    ]
                  },
                  "evmVersion": "london",
                  "externalReferences": [
                    {
                      "declaration": 33451,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "3288:17:57",
                      "valueSize": 1
                    },
                    {
                      "declaration": 33457,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "3307:8:57",
                      "valueSize": 1
                    }
                  ],
                  "id": 33493,
                  "nodeType": "InlineAssembly",
                  "src": "3258:68:57"
                },
                {
                  "id": 33494,
                  "nodeType": "PlaceholderStatement",
                  "src": "3336:1:57"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "3489:63:57",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "LOCK_FLAG_ADDRESS",
                              "nodeType": "YulIdentifier",
                              "src": "3510:17:57"
                            },
                            {
                              "name": "_NOT_ENTERED",
                              "nodeType": "YulIdentifier",
                              "src": "3529:12:57"
                            }
                          ],
                          "functionName": {
                            "name": "sstore",
                            "nodeType": "YulIdentifier",
                            "src": "3503:6:57"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "3503:39:57"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "3503:39:57"
                      }
                    ]
                  },
                  "evmVersion": "london",
                  "externalReferences": [
                    {
                      "declaration": 33451,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "3510:17:57",
                      "valueSize": 1
                    },
                    {
                      "declaration": 33454,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "3529:12:57",
                      "valueSize": 1
                    }
                  ],
                  "id": 33495,
                  "nodeType": "InlineAssembly",
                  "src": "3480:72:57"
                }
              ]
            },
            "documentation": {
              "id": 33480,
              "nodeType": "StructuredDocumentation",
              "src": "2568:364:57",
              "text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and make it call a\n `private` function that does the actual work."
            },
            "name": "nonReentrant",
            "nameLocation": "2946:12:57",
            "parameters": {
              "id": 33481,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2958:2:57"
            },
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": true,
        "baseContracts": [],
        "canonicalName": "ReentrancyGuard",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 33447,
          "nodeType": "StructuredDocumentation",
          "src": "72:887:57",
          "text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n _Since v2.5.0:_ this module is now much more gas efficient, given net gas\n metering changes introduced in the Istanbul hardfork."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          33498
        ],
        "name": "ReentrancyGuard",
        "nameLocation": "978:15:57",
        "scope": 33499,
        "usedErrors": []
      }
    ],
    "license": "MIT OR Apache-2.0"
  },
  "id": 57
}